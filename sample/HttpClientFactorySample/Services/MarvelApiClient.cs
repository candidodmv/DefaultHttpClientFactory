//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace HttpClientFactorySample.Services
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IMarvelApiClient
    {
        /// <summary>Fetches lists of characters.</summary>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="comics">Return only characters which appear in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only characters which appear the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only characters which appear in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only characters which appear the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CharacterDataWrapper> CharactersGetAsync(string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of characters.</summary>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="comics">Return only characters which appear in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only characters which appear the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only characters which appear in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only characters which appear the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CharacterDataWrapper> CharactersGetAsync(string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches a single character by id.</summary>
        /// <param name="characterId">A single character id.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CharacterDataWrapper> CharactersGetAsync(int characterId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches a single character by id.</summary>
        /// <param name="characterId">A single character id.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CharacterDataWrapper> CharactersGetAsync(int characterId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of comics.</summary>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variants (alternate covers, secondary printings, director's cuts, etc.) from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). Accepts a comma-separated list of ids.</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). Accepts a comma-separated list of ids.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComicDataWrapper> ComicsGetAsync(string format, string formatType, bool? noVariants, string dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, bool? hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of comics.</summary>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variants (alternate covers, secondary printings, director's cuts, etc.) from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). Accepts a comma-separated list of ids.</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). Accepts a comma-separated list of ids.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComicDataWrapper> ComicsGetAsync(string format, string formatType, bool? noVariants, string dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, bool? hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches a single comic by id.</summary>
        /// <param name="comicId">A single comic.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComicDataWrapper> ComicsGetAsync(int comicId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches a single comic by id.</summary>
        /// <param name="comicId">A single comic.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComicDataWrapper> ComicsGetAsync(int comicId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of creators.</summary>
        /// <param name="firstName">Filter by creator first name (e.g. Brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsGetAsync(string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of creators.</summary>
        /// <param name="firstName">Filter by creator first name (e.g. Brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsGetAsync(string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches a single creator by id.</summary>
        /// <param name="creatorId">A single creator id.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsGetAsync(int creatorId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches a single creator by id.</summary>
        /// <param name="creatorId">A single creator id.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsGetAsync(int creatorId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of events.</summary>
        /// <param name="name">Return only events which match the specified name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which take place in the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventDataWrapper> EventsGetAsync(string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of events.</summary>
        /// <param name="name">Return only events which match the specified name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which take place in the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventDataWrapper> EventsGetAsync(string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches a single event by id.</summary>
        /// <param name="eventId">A single event.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventDataWrapper> EventsGetAsync(int eventId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches a single event by id.</summary>
        /// <param name="eventId">A single event.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventDataWrapper> EventsGetAsync(int eventId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of series.</summary>
        /// <param name="title">Return only series matching the specified title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only series which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SeriesDataWrapper> SeriesGetAsync(string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of series.</summary>
        /// <param name="title">Return only series matching the specified title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only series which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SeriesDataWrapper> SeriesGetAsync(string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches a single comic series by id.</summary>
        /// <param name="seriesId">Filter by series title.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SeriesDataWrapper> SeriesGetAsync(int seriesId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches a single comic series by id.</summary>
        /// <param name="seriesId">Filter by series title.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SeriesDataWrapper> SeriesGetAsync(int seriesId, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of stories.</summary>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StoryDataWrapper> StoriesGetAsync(System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of stories.</summary>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StoryDataWrapper> StoriesGetAsync(System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches a single comic story by id.</summary>
        /// <param name="storyId">Filter by story id.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StoryDataWrapper> StoriesGetAsync(int storyId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches a single comic story by id.</summary>
        /// <param name="storyId">Filter by story id.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StoryDataWrapper> StoriesGetAsync(int storyId, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MarvelApiClient : IMarvelApiClient
    {
        private string _baseUrl = "http://gateway.marvel.com/";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MarvelApiClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Fetches lists of characters.</summary>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="comics">Return only characters which appear in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only characters which appear the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only characters which appear in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only characters which appear the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CharacterDataWrapper> CharactersGetAsync(string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return CharactersGetAsync(name, nameStartsWith, modifiedSince, comics, series, events, stories, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of characters.</summary>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="comics">Return only characters which appear in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only characters which appear the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only characters which appear in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only characters which appear the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CharacterDataWrapper> CharactersGetAsync(string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/characters?");
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CharacterDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches a single character by id.</summary>
        /// <param name="characterId">A single character id.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CharacterDataWrapper> CharactersGetAsync(int characterId)
        {
            return CharactersGetAsync(characterId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches a single character by id.</summary>
        /// <param name="characterId">A single character id.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CharacterDataWrapper> CharactersGetAsync(int characterId, System.Threading.CancellationToken cancellationToken)
        {
            if (characterId == null)
                throw new System.ArgumentNullException("characterId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/characters/{characterId}");
            urlBuilder_.Replace("{characterId}", System.Uri.EscapeDataString(ConvertToString(characterId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CharacterDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of comics.</summary>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variants (alternate covers, secondary printings, director's cuts, etc.) from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). Accepts a comma-separated list of ids.</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). Accepts a comma-separated list of ids.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ComicDataWrapper> ComicsGetAsync(string format, string formatType, bool? noVariants, string dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, bool? hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return ComicsGetAsync(format, formatType, noVariants, dateDescriptor, dateRange, title, titleStartsWith, startYear, issueNumber, diamondCode, digitalId, upc, isbn, ean, issn, hasDigitalIssue, modifiedSince, creators, characters, series, events, stories, sharedAppearances, collaborators, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of comics.</summary>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variants (alternate covers, secondary printings, director's cuts, etc.) from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). Accepts a comma-separated list of ids.</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). Accepts a comma-separated list of ids.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ComicDataWrapper> ComicsGetAsync(string format, string formatType, bool? noVariants, string dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, bool? hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/comics?");
            if (format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (formatType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("formatType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(formatType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (noVariants != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("noVariants") + "=").Append(System.Uri.EscapeDataString(ConvertToString(noVariants, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dateDescriptor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dateDescriptor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dateDescriptor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dateRange != null)
            {
                foreach (var item_ in dateRange) { urlBuilder_.Append(System.Uri.EscapeDataString("dateRange") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (titleStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("titleStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(titleStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startYear != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (issueNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("issueNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(issueNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (diamondCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("diamondCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(diamondCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (digitalId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("digitalId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(digitalId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (upc != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("upc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(upc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isbn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isbn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isbn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ean != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ean") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ean, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (issn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("issn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(issn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hasDigitalIssue != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hasDigitalIssue") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hasDigitalIssue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sharedAppearances != null)
            {
                foreach (var item_ in sharedAppearances) { urlBuilder_.Append(System.Uri.EscapeDataString("sharedAppearances") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (collaborators != null)
            {
                foreach (var item_ in collaborators) { urlBuilder_.Append(System.Uri.EscapeDataString("collaborators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComicDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches a single comic by id.</summary>
        /// <param name="comicId">A single comic.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ComicDataWrapper> ComicsGetAsync(int comicId)
        {
            return ComicsGetAsync(comicId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches a single comic by id.</summary>
        /// <param name="comicId">A single comic.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ComicDataWrapper> ComicsGetAsync(int comicId, System.Threading.CancellationToken cancellationToken)
        {
            if (comicId == null)
                throw new System.ArgumentNullException("comicId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/comics/{comicId}");
            urlBuilder_.Replace("{comicId}", System.Uri.EscapeDataString(ConvertToString(comicId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComicDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of creators.</summary>
        /// <param name="firstName">Filter by creator first name (e.g. Brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsGetAsync(string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return CreatorsGetAsync(firstName, middleName, lastName, suffix, nameStartsWith, firstNameStartsWith, middleNameStartsWith, lastNameStartsWith, modifiedSince, comics, series, events, stories, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of creators.</summary>
        /// <param name="firstName">Filter by creator first name (e.g. Brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsGetAsync(string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/creators?");
            if (firstName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("firstName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(firstName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (middleName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("middleName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(middleName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (suffix != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("suffix") + "=").Append(System.Uri.EscapeDataString(ConvertToString(suffix, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (firstNameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("firstNameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(firstNameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (middleNameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("middleNameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(middleNameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastNameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastNameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastNameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreatorDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches a single creator by id.</summary>
        /// <param name="creatorId">A single creator id.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsGetAsync(int creatorId)
        {
            return CreatorsGetAsync(creatorId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches a single creator by id.</summary>
        /// <param name="creatorId">A single creator id.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsGetAsync(int creatorId, System.Threading.CancellationToken cancellationToken)
        {
            if (creatorId == null)
                throw new System.ArgumentNullException("creatorId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/creators/{creatorId}");
            urlBuilder_.Replace("{creatorId}", System.Uri.EscapeDataString(ConvertToString(creatorId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreatorDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of events.</summary>
        /// <param name="name">Return only events which match the specified name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which take place in the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventDataWrapper> EventsGetAsync(string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return EventsGetAsync(name, nameStartsWith, modifiedSince, creators, characters, series, comics, stories, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of events.</summary>
        /// <param name="name">Return only events which match the specified name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which take place in the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventDataWrapper> EventsGetAsync(string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/events?");
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches a single event by id.</summary>
        /// <param name="eventId">A single event.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventDataWrapper> EventsGetAsync(int eventId)
        {
            return EventsGetAsync(eventId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches a single event by id.</summary>
        /// <param name="eventId">A single event.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventDataWrapper> EventsGetAsync(int eventId, System.Threading.CancellationToken cancellationToken)
        {
            if (eventId == null)
                throw new System.ArgumentNullException("eventId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/events/{eventId}");
            urlBuilder_.Replace("{eventId}", System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of series.</summary>
        /// <param name="title">Return only series matching the specified title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only series which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SeriesDataWrapper> SeriesGetAsync(string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return SeriesGetAsync(title, titleStartsWith, startYear, modifiedSince, comics, stories, events, creators, characters, seriesType, contains, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of series.</summary>
        /// <param name="title">Return only series matching the specified title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only series which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SeriesDataWrapper> SeriesGetAsync(string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/series?");
            if (title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (titleStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("titleStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(titleStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startYear != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (seriesType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("seriesType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(seriesType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (contains != null)
            {
                foreach (var item_ in contains) { urlBuilder_.Append(System.Uri.EscapeDataString("contains") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SeriesDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches a single comic series by id.</summary>
        /// <param name="seriesId">Filter by series title.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SeriesDataWrapper> SeriesGetAsync(int seriesId)
        {
            return SeriesGetAsync(seriesId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches a single comic series by id.</summary>
        /// <param name="seriesId">Filter by series title.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SeriesDataWrapper> SeriesGetAsync(int seriesId, System.Threading.CancellationToken cancellationToken)
        {
            if (seriesId == null)
                throw new System.ArgumentNullException("seriesId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/series/{seriesId}");
            urlBuilder_.Replace("{seriesId}", System.Uri.EscapeDataString(ConvertToString(seriesId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SeriesDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of stories.</summary>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StoryDataWrapper> StoriesGetAsync(System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return StoriesGetAsync(modifiedSince, comics, series, events, creators, characters, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of stories.</summary>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StoryDataWrapper> StoriesGetAsync(System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/stories?");
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StoryDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches a single comic story by id.</summary>
        /// <param name="storyId">Filter by story id.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StoryDataWrapper> StoriesGetAsync(int storyId)
        {
            return StoriesGetAsync(storyId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches a single comic story by id.</summary>
        /// <param name="storyId">Filter by story id.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StoryDataWrapper> StoriesGetAsync(int storyId, System.Threading.CancellationToken cancellationToken)
        {
            if (storyId == null)
                throw new System.ArgumentNullException("storyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/stories/{storyId}");
            urlBuilder_.Replace("{storyId}", System.Uri.EscapeDataString(ConvertToString(storyId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StoryDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return null;
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return (result is null) ? string.Empty : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface ICharactersClient
    {
        /// <summary>Fetches lists of comics filtered by a character id.</summary>
        /// <param name="characterId">The character id.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int characterId, string format, string formatType, bool? noVariants, string dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, bool? hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of comics filtered by a character id.</summary>
        /// <param name="characterId">The character id.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int characterId, string format, string formatType, bool? noVariants, string dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, bool? hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of events filtered by a character id.</summary>
        /// <param name="characterId">The character ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int characterId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of events filtered by a character id.</summary>
        /// <param name="characterId">The character ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int characterId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of series filtered by a character id.</summary>
        /// <param name="characterId">The character ID</param>
        /// <param name="title">Filter by series title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only series which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SeriesDataWrapper> SeriesAsync(int characterId, string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of series filtered by a character id.</summary>
        /// <param name="characterId">The character ID</param>
        /// <param name="title">Filter by series title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only series which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SeriesDataWrapper> SeriesAsync(int characterId, string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of stories filtered by a character id.</summary>
        /// <param name="characterId">The character ID.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int characterId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of stories filtered by a character id.</summary>
        /// <param name="characterId">The character ID.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int characterId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CharactersClient : ICharactersClient
    {
        private string _baseUrl = "http://gateway.marvel.com/";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public CharactersClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Fetches lists of comics filtered by a character id.</summary>
        /// <param name="characterId">The character id.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int characterId, string format, string formatType, bool? noVariants, string dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, bool? hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return ComicsAsync(characterId, format, formatType, noVariants, dateDescriptor, dateRange, title, titleStartsWith, startYear, issueNumber, diamondCode, digitalId, upc, isbn, ean, issn, hasDigitalIssue, modifiedSince, creators, series, events, stories, sharedAppearances, collaborators, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of comics filtered by a character id.</summary>
        /// <param name="characterId">The character id.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int characterId, string format, string formatType, bool? noVariants, string dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, bool? hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (characterId == null)
                throw new System.ArgumentNullException("characterId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/characters/{characterId}/comics?");
            urlBuilder_.Replace("{characterId}", System.Uri.EscapeDataString(ConvertToString(characterId, System.Globalization.CultureInfo.InvariantCulture)));
            if (format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (formatType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("formatType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(formatType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (noVariants != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("noVariants") + "=").Append(System.Uri.EscapeDataString(ConvertToString(noVariants, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dateDescriptor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dateDescriptor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dateDescriptor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dateRange != null)
            {
                foreach (var item_ in dateRange) { urlBuilder_.Append(System.Uri.EscapeDataString("dateRange") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (titleStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("titleStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(titleStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startYear != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (issueNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("issueNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(issueNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (diamondCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("diamondCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(diamondCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (digitalId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("digitalId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(digitalId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (upc != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("upc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(upc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isbn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isbn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isbn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ean != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ean") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ean, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (issn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("issn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(issn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hasDigitalIssue != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("hasDigitalIssue") + "=").Append(System.Uri.EscapeDataString(ConvertToString(hasDigitalIssue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sharedAppearances != null)
            {
                foreach (var item_ in sharedAppearances) { urlBuilder_.Append(System.Uri.EscapeDataString("sharedAppearances") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (collaborators != null)
            {
                foreach (var item_ in collaborators) { urlBuilder_.Append(System.Uri.EscapeDataString("collaborators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComicDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of events filtered by a character id.</summary>
        /// <param name="characterId">The character ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int characterId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return EventsAsync(characterId, name, nameStartsWith, modifiedSince, creators, series, comics, stories, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of events filtered by a character id.</summary>
        /// <param name="characterId">The character ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int characterId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (characterId == null)
                throw new System.ArgumentNullException("characterId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/characters/{characterId}/events?");
            urlBuilder_.Replace("{characterId}", System.Uri.EscapeDataString(ConvertToString(characterId, System.Globalization.CultureInfo.InvariantCulture)));
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of series filtered by a character id.</summary>
        /// <param name="characterId">The character ID</param>
        /// <param name="title">Filter by series title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only series which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SeriesDataWrapper> SeriesAsync(int characterId, string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return SeriesAsync(characterId, title, titleStartsWith, startYear, modifiedSince, comics, stories, events, creators, seriesType, contains, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of series filtered by a character id.</summary>
        /// <param name="characterId">The character ID</param>
        /// <param name="title">Filter by series title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only series which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SeriesDataWrapper> SeriesAsync(int characterId, string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (characterId == null)
                throw new System.ArgumentNullException("characterId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/characters/{characterId}/series?");
            urlBuilder_.Replace("{characterId}", System.Uri.EscapeDataString(ConvertToString(characterId, System.Globalization.CultureInfo.InvariantCulture)));
            if (title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (titleStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("titleStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(titleStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startYear != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (seriesType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("seriesType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(seriesType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (contains != null)
            {
                foreach (var item_ in contains) { urlBuilder_.Append(System.Uri.EscapeDataString("contains") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SeriesDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of stories filtered by a character id.</summary>
        /// <param name="characterId">The character ID.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int characterId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return StoriesAsync(characterId, modifiedSince, comics, series, events, creators, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of stories filtered by a character id.</summary>
        /// <param name="characterId">The character ID.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int characterId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (characterId == null)
                throw new System.ArgumentNullException("characterId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/characters/{characterId}/stories?");
            urlBuilder_.Replace("{characterId}", System.Uri.EscapeDataString(ConvertToString(characterId, System.Globalization.CultureInfo.InvariantCulture)));
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StoryDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return null;
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return (result is null) ? string.Empty : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IComicsClient
    {
        /// <summary>Fetches lists of characters filtered by a comic id.</summary>
        /// <param name="comicId">The comic id.</param>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="series">Return only characters which appear the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only characters which appear the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CharacterDataWrapper> CharactersAsync(int comicId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of characters filtered by a comic id.</summary>
        /// <param name="comicId">The comic id.</param>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="series">Return only characters which appear the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only characters which appear the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CharacterDataWrapper> CharactersAsync(int comicId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of creators filtered by a comic id.</summary>
        /// <param name="comicId">The comic id.</param>
        /// <param name="firstName">Filter by creator first name (e.g. brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsAsync(int comicId, string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of creators filtered by a comic id.</summary>
        /// <param name="comicId">The comic id.</param>
        /// <param name="firstName">Filter by creator first name (e.g. brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsAsync(int comicId, string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of events filtered by a comic id.</summary>
        /// <param name="comicId">The comic ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int comicId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of events filtered by a comic id.</summary>
        /// <param name="comicId">The comic ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int comicId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of stories filtered by a comic id.</summary>
        /// <param name="comicId">The comic ID.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int comicId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of stories filtered by a comic id.</summary>
        /// <param name="comicId">The comic ID.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int comicId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ComicsClient : IComicsClient
    {
        private string _baseUrl = "http://gateway.marvel.com/";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public ComicsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Fetches lists of characters filtered by a comic id.</summary>
        /// <param name="comicId">The comic id.</param>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="series">Return only characters which appear the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only characters which appear the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CharacterDataWrapper> CharactersAsync(int comicId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return CharactersAsync(comicId, name, nameStartsWith, modifiedSince, series, events, stories, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of characters filtered by a comic id.</summary>
        /// <param name="comicId">The comic id.</param>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="series">Return only characters which appear the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only characters which appear the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CharacterDataWrapper> CharactersAsync(int comicId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (comicId == null)
                throw new System.ArgumentNullException("comicId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/comics/{comicId}/characters?");
            urlBuilder_.Replace("{comicId}", System.Uri.EscapeDataString(ConvertToString(comicId, System.Globalization.CultureInfo.InvariantCulture)));
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CharacterDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of creators filtered by a comic id.</summary>
        /// <param name="comicId">The comic id.</param>
        /// <param name="firstName">Filter by creator first name (e.g. brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsAsync(int comicId, string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return CreatorsAsync(comicId, firstName, middleName, lastName, suffix, nameStartsWith, firstNameStartsWith, middleNameStartsWith, lastNameStartsWith, modifiedSince, comics, series, stories, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of creators filtered by a comic id.</summary>
        /// <param name="comicId">The comic id.</param>
        /// <param name="firstName">Filter by creator first name (e.g. brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsAsync(int comicId, string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (comicId == null)
                throw new System.ArgumentNullException("comicId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/comics/{comicId}/creators?");
            urlBuilder_.Replace("{comicId}", System.Uri.EscapeDataString(ConvertToString(comicId, System.Globalization.CultureInfo.InvariantCulture)));
            if (firstName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("firstName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(firstName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (middleName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("middleName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(middleName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (suffix != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("suffix") + "=").Append(System.Uri.EscapeDataString(ConvertToString(suffix, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (firstNameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("firstNameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(firstNameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (middleNameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("middleNameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(middleNameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastNameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastNameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastNameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreatorDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of events filtered by a comic id.</summary>
        /// <param name="comicId">The comic ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int comicId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return EventsAsync(comicId, name, nameStartsWith, modifiedSince, creators, characters, series, stories, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of events filtered by a comic id.</summary>
        /// <param name="comicId">The comic ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int comicId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (comicId == null)
                throw new System.ArgumentNullException("comicId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/comics/{comicId}/events?");
            urlBuilder_.Replace("{comicId}", System.Uri.EscapeDataString(ConvertToString(comicId, System.Globalization.CultureInfo.InvariantCulture)));
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of stories filtered by a comic id.</summary>
        /// <param name="comicId">The comic ID.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int comicId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return StoriesAsync(comicId, modifiedSince, series, events, creators, characters, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of stories filtered by a comic id.</summary>
        /// <param name="comicId">The comic ID.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int comicId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (comicId == null)
                throw new System.ArgumentNullException("comicId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/comics/{comicId}/stories?");
            urlBuilder_.Replace("{comicId}", System.Uri.EscapeDataString(ConvertToString(comicId, System.Globalization.CultureInfo.InvariantCulture)));
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StoryDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return null;
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return (result is null) ? string.Empty : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface ICreatorsClient
    {
        /// <summary>Fetches lists of comics filtered by a creator id.</summary>
        /// <param name="creatorId">The creator ID.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int creatorId, string format, string formatType, bool? noVariants, string dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, System.Collections.Generic.IEnumerable<bool> hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of comics filtered by a creator id.</summary>
        /// <param name="creatorId">The creator ID.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int creatorId, string format, string formatType, bool? noVariants, string dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, System.Collections.Generic.IEnumerable<bool> hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of events filtered by a creator id.</summary>
        /// <param name="creatorId">The creator ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int creatorId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of events filtered by a creator id.</summary>
        /// <param name="creatorId">The creator ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int creatorId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of series filtered by a creator id.</summary>
        /// <param name="creatorId">The creator ID.</param>
        /// <param name="title">Filter by series title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SeriesDataWrapper> SeriesAsync(int creatorId, string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> characters, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of series filtered by a creator id.</summary>
        /// <param name="creatorId">The creator ID.</param>
        /// <param name="title">Filter by series title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SeriesDataWrapper> SeriesAsync(int creatorId, string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> characters, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of stories filtered by a creator id.</summary>
        /// <param name="creatorId">The ID of the creator.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int creatorId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of stories filtered by a creator id.</summary>
        /// <param name="creatorId">The ID of the creator.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int creatorId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreatorsClient : ICreatorsClient
    {
        private string _baseUrl = "http://gateway.marvel.com/";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public CreatorsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Fetches lists of comics filtered by a creator id.</summary>
        /// <param name="creatorId">The creator ID.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int creatorId, string format, string formatType, bool? noVariants, string dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, System.Collections.Generic.IEnumerable<bool> hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return ComicsAsync(creatorId, format, formatType, noVariants, dateDescriptor, dateRange, title, titleStartsWith, startYear, issueNumber, diamondCode, digitalId, upc, isbn, ean, issn, hasDigitalIssue, modifiedSince, characters, series, events, stories, sharedAppearances, collaborators, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of comics filtered by a creator id.</summary>
        /// <param name="creatorId">The creator ID.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int creatorId, string format, string formatType, bool? noVariants, string dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, System.Collections.Generic.IEnumerable<bool> hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (creatorId == null)
                throw new System.ArgumentNullException("creatorId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/creators/{creatorId}/comics?");
            urlBuilder_.Replace("{creatorId}", System.Uri.EscapeDataString(ConvertToString(creatorId, System.Globalization.CultureInfo.InvariantCulture)));
            if (format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (formatType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("formatType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(formatType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (noVariants != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("noVariants") + "=").Append(System.Uri.EscapeDataString(ConvertToString(noVariants, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dateDescriptor != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dateDescriptor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dateDescriptor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dateRange != null)
            {
                foreach (var item_ in dateRange) { urlBuilder_.Append(System.Uri.EscapeDataString("dateRange") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (titleStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("titleStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(titleStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startYear != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (issueNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("issueNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(issueNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (diamondCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("diamondCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(diamondCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (digitalId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("digitalId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(digitalId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (upc != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("upc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(upc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isbn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isbn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isbn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ean != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ean") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ean, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (issn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("issn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(issn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hasDigitalIssue != null)
            {
                foreach (var item_ in hasDigitalIssue) { urlBuilder_.Append(System.Uri.EscapeDataString("hasDigitalIssue") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sharedAppearances != null)
            {
                foreach (var item_ in sharedAppearances) { urlBuilder_.Append(System.Uri.EscapeDataString("sharedAppearances") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (collaborators != null)
            {
                foreach (var item_ in collaborators) { urlBuilder_.Append(System.Uri.EscapeDataString("collaborators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComicDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of events filtered by a creator id.</summary>
        /// <param name="creatorId">The creator ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int creatorId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return EventsAsync(creatorId, name, nameStartsWith, modifiedSince, characters, series, comics, stories, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of events filtered by a creator id.</summary>
        /// <param name="creatorId">The creator ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int creatorId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (creatorId == null)
                throw new System.ArgumentNullException("creatorId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/creators/{creatorId}/events?");
            urlBuilder_.Replace("{creatorId}", System.Uri.EscapeDataString(ConvertToString(creatorId, System.Globalization.CultureInfo.InvariantCulture)));
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of series filtered by a creator id.</summary>
        /// <param name="creatorId">The creator ID.</param>
        /// <param name="title">Filter by series title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SeriesDataWrapper> SeriesAsync(int creatorId, string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> characters, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return SeriesAsync(creatorId, title, titleStartsWith, startYear, modifiedSince, comics, stories, events, characters, seriesType, contains, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of series filtered by a creator id.</summary>
        /// <param name="creatorId">The creator ID.</param>
        /// <param name="title">Filter by series title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SeriesDataWrapper> SeriesAsync(int creatorId, string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> characters, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (creatorId == null)
                throw new System.ArgumentNullException("creatorId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/creators/{creatorId}/series?");
            urlBuilder_.Replace("{creatorId}", System.Uri.EscapeDataString(ConvertToString(creatorId, System.Globalization.CultureInfo.InvariantCulture)));
            if (title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (titleStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("titleStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(titleStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startYear != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (seriesType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("seriesType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(seriesType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (contains != null)
            {
                foreach (var item_ in contains) { urlBuilder_.Append(System.Uri.EscapeDataString("contains") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SeriesDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of stories filtered by a creator id.</summary>
        /// <param name="creatorId">The ID of the creator.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int creatorId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return StoriesAsync(creatorId, modifiedSince, comics, series, events, characters, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of stories filtered by a creator id.</summary>
        /// <param name="creatorId">The ID of the creator.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int creatorId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (creatorId == null)
                throw new System.ArgumentNullException("creatorId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/creators/{creatorId}/stories?");
            urlBuilder_.Replace("{creatorId}", System.Uri.EscapeDataString(ConvertToString(creatorId, System.Globalization.CultureInfo.InvariantCulture)));
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StoryDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return null;
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return (result is null) ? string.Empty : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IEventsClient
    {
        /// <summary>Fetches lists of characters filtered by an event id.</summary>
        /// <param name="eventId">The event ID</param>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="comics">Return only characters which appear in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only characters which appear the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only characters which appear the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CharacterDataWrapper> CharactersAsync(int eventId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of characters filtered by an event id.</summary>
        /// <param name="eventId">The event ID</param>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="comics">Return only characters which appear in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only characters which appear the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only characters which appear the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CharacterDataWrapper> CharactersAsync(int eventId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of comics filtered by an event id.</summary>
        /// <param name="eventId">The event id.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int eventId, string format, string formatType, System.Collections.Generic.IEnumerable<bool> noVariants, System.Collections.Generic.IEnumerable<string> dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, System.Collections.Generic.IEnumerable<bool> hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of comics filtered by an event id.</summary>
        /// <param name="eventId">The event id.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int eventId, string format, string formatType, System.Collections.Generic.IEnumerable<bool> noVariants, System.Collections.Generic.IEnumerable<string> dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, System.Collections.Generic.IEnumerable<bool> hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of creators filtered by an event id.</summary>
        /// <param name="eventId">The event ID.</param>
        /// <param name="firstName">Filter by creator first name (e.g. brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsAsync(int eventId, string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of creators filtered by an event id.</summary>
        /// <param name="eventId">The event ID.</param>
        /// <param name="firstName">Filter by creator first name (e.g. brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsAsync(int eventId, string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of series filtered by an event id.</summary>
        /// <param name="eventId">The event ID.</param>
        /// <param name="title">Filter by series title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only series which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SeriesDataWrapper> SeriesAsync(int eventId, string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of series filtered by an event id.</summary>
        /// <param name="eventId">The event ID.</param>
        /// <param name="title">Filter by series title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only series which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SeriesDataWrapper> SeriesAsync(int eventId, string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of stories filtered by an event id.</summary>
        /// <param name="eventId">The ID of the event.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int eventId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of stories filtered by an event id.</summary>
        /// <param name="eventId">The ID of the event.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int eventId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class EventsClient : IEventsClient
    {
        private string _baseUrl = "http://gateway.marvel.com/";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public EventsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Fetches lists of characters filtered by an event id.</summary>
        /// <param name="eventId">The event ID</param>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="comics">Return only characters which appear in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only characters which appear the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only characters which appear the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CharacterDataWrapper> CharactersAsync(int eventId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return CharactersAsync(eventId, name, nameStartsWith, modifiedSince, comics, series, stories, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of characters filtered by an event id.</summary>
        /// <param name="eventId">The event ID</param>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="comics">Return only characters which appear in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only characters which appear the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only characters which appear the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CharacterDataWrapper> CharactersAsync(int eventId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (eventId == null)
                throw new System.ArgumentNullException("eventId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/events/{eventId}/characters?");
            urlBuilder_.Replace("{eventId}", System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture)));
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CharacterDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of comics filtered by an event id.</summary>
        /// <param name="eventId">The event id.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int eventId, string format, string formatType, System.Collections.Generic.IEnumerable<bool> noVariants, System.Collections.Generic.IEnumerable<string> dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, System.Collections.Generic.IEnumerable<bool> hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return ComicsAsync(eventId, format, formatType, noVariants, dateDescriptor, dateRange, title, titleStartsWith, startYear, issueNumber, diamondCode, digitalId, upc, isbn, ean, issn, hasDigitalIssue, modifiedSince, creators, characters, series, events, stories, sharedAppearances, collaborators, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of comics filtered by an event id.</summary>
        /// <param name="eventId">The event id.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int eventId, string format, string formatType, System.Collections.Generic.IEnumerable<bool> noVariants, System.Collections.Generic.IEnumerable<string> dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, System.Collections.Generic.IEnumerable<bool> hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (eventId == null)
                throw new System.ArgumentNullException("eventId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/events/{eventId}/comics?");
            urlBuilder_.Replace("{eventId}", System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture)));
            if (format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (formatType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("formatType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(formatType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (noVariants != null)
            {
                foreach (var item_ in noVariants) { urlBuilder_.Append(System.Uri.EscapeDataString("noVariants") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dateDescriptor != null)
            {
                foreach (var item_ in dateDescriptor) { urlBuilder_.Append(System.Uri.EscapeDataString("dateDescriptor") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dateRange != null)
            {
                foreach (var item_ in dateRange) { urlBuilder_.Append(System.Uri.EscapeDataString("dateRange") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (titleStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("titleStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(titleStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startYear != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (issueNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("issueNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(issueNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (diamondCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("diamondCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(diamondCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (digitalId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("digitalId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(digitalId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (upc != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("upc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(upc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isbn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isbn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isbn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ean != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ean") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ean, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (issn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("issn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(issn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hasDigitalIssue != null)
            {
                foreach (var item_ in hasDigitalIssue) { urlBuilder_.Append(System.Uri.EscapeDataString("hasDigitalIssue") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sharedAppearances != null)
            {
                foreach (var item_ in sharedAppearances) { urlBuilder_.Append(System.Uri.EscapeDataString("sharedAppearances") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (collaborators != null)
            {
                foreach (var item_ in collaborators) { urlBuilder_.Append(System.Uri.EscapeDataString("collaborators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComicDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of creators filtered by an event id.</summary>
        /// <param name="eventId">The event ID.</param>
        /// <param name="firstName">Filter by creator first name (e.g. brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsAsync(int eventId, string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return CreatorsAsync(eventId, firstName, middleName, lastName, suffix, nameStartsWith, firstNameStartsWith, middleNameStartsWith, lastNameStartsWith, modifiedSince, comics, series, stories, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of creators filtered by an event id.</summary>
        /// <param name="eventId">The event ID.</param>
        /// <param name="firstName">Filter by creator first name (e.g. brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsAsync(int eventId, string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (eventId == null)
                throw new System.ArgumentNullException("eventId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/events/{eventId}/creators?");
            urlBuilder_.Replace("{eventId}", System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture)));
            if (firstName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("firstName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(firstName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (middleName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("middleName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(middleName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (suffix != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("suffix") + "=").Append(System.Uri.EscapeDataString(ConvertToString(suffix, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (firstNameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("firstNameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(firstNameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (middleNameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("middleNameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(middleNameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastNameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastNameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastNameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreatorDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of series filtered by an event id.</summary>
        /// <param name="eventId">The event ID.</param>
        /// <param name="title">Filter by series title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only series which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SeriesDataWrapper> SeriesAsync(int eventId, string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return SeriesAsync(eventId, title, titleStartsWith, startYear, modifiedSince, comics, stories, creators, characters, seriesType, contains, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of series filtered by an event id.</summary>
        /// <param name="eventId">The event ID.</param>
        /// <param name="title">Filter by series title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only series which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only series which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SeriesDataWrapper> SeriesAsync(int eventId, string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (eventId == null)
                throw new System.ArgumentNullException("eventId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/events/{eventId}/series?");
            urlBuilder_.Replace("{eventId}", System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture)));
            if (title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (titleStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("titleStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(titleStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startYear != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (seriesType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("seriesType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(seriesType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (contains != null)
            {
                foreach (var item_ in contains) { urlBuilder_.Append(System.Uri.EscapeDataString("contains") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SeriesDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of stories filtered by an event id.</summary>
        /// <param name="eventId">The ID of the event.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int eventId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return StoriesAsync(eventId, modifiedSince, comics, series, creators, characters, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of stories filtered by an event id.</summary>
        /// <param name="eventId">The ID of the event.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only stories contained the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int eventId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (eventId == null)
                throw new System.ArgumentNullException("eventId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/events/{eventId}/stories?");
            urlBuilder_.Replace("{eventId}", System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture)));
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StoryDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return null;
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return (result is null) ? string.Empty : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface ISeriesClient
    {
        /// <summary>Fetches lists of characters filtered by a series id.</summary>
        /// <param name="seriesId">The series id.</param>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="comics">Return only characters which appear in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only characters which appear the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CharacterDataWrapper> CharactersAsync(int seriesId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of characters filtered by a series id.</summary>
        /// <param name="seriesId">The series id.</param>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="comics">Return only characters which appear in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only characters which appear the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CharacterDataWrapper> CharactersAsync(int seriesId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of comics filtered by a series id.</summary>
        /// <param name="seriesId">The series ID.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int seriesId, string format, string formatType, System.Collections.Generic.IEnumerable<bool> noVariants, System.Collections.Generic.IEnumerable<string> dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, System.Collections.Generic.IEnumerable<bool> hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of comics filtered by a series id.</summary>
        /// <param name="seriesId">The series ID.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int seriesId, string format, string formatType, System.Collections.Generic.IEnumerable<bool> noVariants, System.Collections.Generic.IEnumerable<string> dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, System.Collections.Generic.IEnumerable<bool> hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of creators filtered by a series id.</summary>
        /// <param name="seriesId">The series ID.</param>
        /// <param name="firstName">Filter by creator first name (e.g. brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsAsync(int seriesId, string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of creators filtered by a series id.</summary>
        /// <param name="seriesId">The series ID.</param>
        /// <param name="firstName">Filter by creator first name (e.g. brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsAsync(int seriesId, string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of events filtered by a series id.</summary>
        /// <param name="seriesId">The series ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int seriesId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of events filtered by a series id.</summary>
        /// <param name="seriesId">The series ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int seriesId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of stories filtered by a series id.</summary>
        /// <param name="seriesId">The series ID.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int seriesId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of stories filtered by a series id.</summary>
        /// <param name="seriesId">The series ID.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int seriesId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SeriesClient : ISeriesClient
    {
        private string _baseUrl = "http://gateway.marvel.com/";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public SeriesClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Fetches lists of characters filtered by a series id.</summary>
        /// <param name="seriesId">The series id.</param>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="comics">Return only characters which appear in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only characters which appear the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CharacterDataWrapper> CharactersAsync(int seriesId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return CharactersAsync(seriesId, name, nameStartsWith, modifiedSince, comics, events, stories, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of characters filtered by a series id.</summary>
        /// <param name="seriesId">The series id.</param>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="comics">Return only characters which appear in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only characters which appear the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CharacterDataWrapper> CharactersAsync(int seriesId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (seriesId == null)
                throw new System.ArgumentNullException("seriesId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/series/{seriesId}/characters?");
            urlBuilder_.Replace("{seriesId}", System.Uri.EscapeDataString(ConvertToString(seriesId, System.Globalization.CultureInfo.InvariantCulture)));
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CharacterDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of comics filtered by a series id.</summary>
        /// <param name="seriesId">The series ID.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int seriesId, string format, string formatType, System.Collections.Generic.IEnumerable<bool> noVariants, System.Collections.Generic.IEnumerable<string> dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, System.Collections.Generic.IEnumerable<bool> hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return ComicsAsync(seriesId, format, formatType, noVariants, dateDescriptor, dateRange, title, titleStartsWith, startYear, issueNumber, diamondCode, digitalId, upc, isbn, ean, issn, hasDigitalIssue, modifiedSince, creators, characters, events, stories, sharedAppearances, collaborators, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of comics filtered by a series id.</summary>
        /// <param name="seriesId">The series ID.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only comics which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int seriesId, string format, string formatType, System.Collections.Generic.IEnumerable<bool> noVariants, System.Collections.Generic.IEnumerable<string> dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, System.Collections.Generic.IEnumerable<bool> hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (seriesId == null)
                throw new System.ArgumentNullException("seriesId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/series/{seriesId}/comics?");
            urlBuilder_.Replace("{seriesId}", System.Uri.EscapeDataString(ConvertToString(seriesId, System.Globalization.CultureInfo.InvariantCulture)));
            if (format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (formatType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("formatType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(formatType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (noVariants != null)
            {
                foreach (var item_ in noVariants) { urlBuilder_.Append(System.Uri.EscapeDataString("noVariants") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dateDescriptor != null)
            {
                foreach (var item_ in dateDescriptor) { urlBuilder_.Append(System.Uri.EscapeDataString("dateDescriptor") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dateRange != null)
            {
                foreach (var item_ in dateRange) { urlBuilder_.Append(System.Uri.EscapeDataString("dateRange") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (titleStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("titleStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(titleStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startYear != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (issueNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("issueNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(issueNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (diamondCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("diamondCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(diamondCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (digitalId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("digitalId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(digitalId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (upc != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("upc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(upc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isbn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isbn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isbn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ean != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ean") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ean, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (issn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("issn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(issn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hasDigitalIssue != null)
            {
                foreach (var item_ in hasDigitalIssue) { urlBuilder_.Append(System.Uri.EscapeDataString("hasDigitalIssue") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sharedAppearances != null)
            {
                foreach (var item_ in sharedAppearances) { urlBuilder_.Append(System.Uri.EscapeDataString("sharedAppearances") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (collaborators != null)
            {
                foreach (var item_ in collaborators) { urlBuilder_.Append(System.Uri.EscapeDataString("collaborators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComicDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of creators filtered by a series id.</summary>
        /// <param name="seriesId">The series ID.</param>
        /// <param name="firstName">Filter by creator first name (e.g. brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsAsync(int seriesId, string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return CreatorsAsync(seriesId, firstName, middleName, lastName, suffix, nameStartsWith, firstNameStartsWith, middleNameStartsWith, lastNameStartsWith, modifiedSince, comics, events, stories, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of creators filtered by a series id.</summary>
        /// <param name="seriesId">The series ID.</param>
        /// <param name="firstName">Filter by creator first name (e.g. brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only creators who worked on the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsAsync(int seriesId, string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (seriesId == null)
                throw new System.ArgumentNullException("seriesId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/series/{seriesId}/creators?");
            urlBuilder_.Replace("{seriesId}", System.Uri.EscapeDataString(ConvertToString(seriesId, System.Globalization.CultureInfo.InvariantCulture)));
            if (firstName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("firstName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(firstName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (middleName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("middleName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(middleName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (suffix != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("suffix") + "=").Append(System.Uri.EscapeDataString(ConvertToString(suffix, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (firstNameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("firstNameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(firstNameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (middleNameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("middleNameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(middleNameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastNameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastNameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastNameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreatorDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of events filtered by a series id.</summary>
        /// <param name="seriesId">The series ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int seriesId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return EventsAsync(seriesId, name, nameStartsWith, modifiedSince, creators, characters, comics, stories, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of events filtered by a series id.</summary>
        /// <param name="seriesId">The series ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="stories">Return only events which contain the specified stories (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int seriesId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> stories, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (seriesId == null)
                throw new System.ArgumentNullException("seriesId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/series/{seriesId}/events?");
            urlBuilder_.Replace("{seriesId}", System.Uri.EscapeDataString(ConvertToString(seriesId, System.Globalization.CultureInfo.InvariantCulture)));
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stories != null)
            {
                foreach (var item_ in stories) { urlBuilder_.Append(System.Uri.EscapeDataString("stories") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of stories filtered by a series id.</summary>
        /// <param name="seriesId">The series ID.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int seriesId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return StoriesAsync(seriesId, modifiedSince, comics, events, creators, characters, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of stories filtered by a series id.</summary>
        /// <param name="seriesId">The series ID.</param>
        /// <param name="modifiedSince">Return only stories which have been modified since the specified date.</param>
        /// <param name="comics">Return only stories contained in the specified (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only stories which take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only stories which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StoryDataWrapper> StoriesAsync(int seriesId, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (seriesId == null)
                throw new System.ArgumentNullException("seriesId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/series/{seriesId}/stories?");
            urlBuilder_.Replace("{seriesId}", System.Uri.EscapeDataString(ConvertToString(seriesId, System.Globalization.CultureInfo.InvariantCulture)));
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StoryDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return null;
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return (result is null) ? string.Empty : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IStoriesClient
    {
        /// <summary>Fetches lists of characters filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="comics">Return only characters which appear in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only characters which appear the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CharacterDataWrapper> CharactersAsync(int storyId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of characters filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="comics">Return only characters which appear in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only characters which appear the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CharacterDataWrapper> CharactersAsync(int storyId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of comics filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int storyId, string format, string formatType, System.Collections.Generic.IEnumerable<bool> noVariants, System.Collections.Generic.IEnumerable<string> dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, System.Collections.Generic.IEnumerable<bool> hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of comics filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int storyId, string format, string formatType, System.Collections.Generic.IEnumerable<bool> noVariants, System.Collections.Generic.IEnumerable<string> dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, System.Collections.Generic.IEnumerable<bool> hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of creators filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="firstName">Filter by creator first name (e.g. brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsAsync(int storyId, string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of creators filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="firstName">Filter by creator first name (e.g. brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsAsync(int storyId, string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of events filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int storyId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of events filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int storyId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

        /// <summary>Fetches lists of series filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="events">Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="title">Filter by series title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only series which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SeriesDataWrapper> SeriesAsync(int storyId, System.Collections.Generic.IEnumerable<int> events, string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of series filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="events">Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="title">Filter by series title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only series which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SeriesDataWrapper> SeriesAsync(int storyId, System.Collections.Generic.IEnumerable<int> events, string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StoriesClient : IStoriesClient
    {
        private string _baseUrl = "http://gateway.marvel.com/";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public StoriesClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Fetches lists of characters filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="comics">Return only characters which appear in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only characters which appear the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CharacterDataWrapper> CharactersAsync(int storyId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return CharactersAsync(storyId, name, nameStartsWith, modifiedSince, comics, series, events, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of characters filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="name">Return only characters matching the specified full character name (e.g. Spider-Man).</param>
        /// <param name="nameStartsWith">Return characters with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only characters which have been modified since the specified date.</param>
        /// <param name="comics">Return only characters which appear in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only characters which appear the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CharacterDataWrapper> CharactersAsync(int storyId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (storyId == null)
                throw new System.ArgumentNullException("storyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/stories/{storyId}/characters?");
            urlBuilder_.Replace("{storyId}", System.Uri.EscapeDataString(ConvertToString(storyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CharacterDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of comics filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int storyId, string format, string formatType, System.Collections.Generic.IEnumerable<bool> noVariants, System.Collections.Generic.IEnumerable<string> dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, System.Collections.Generic.IEnumerable<bool> hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return ComicsAsync(storyId, format, formatType, noVariants, dateDescriptor, dateRange, title, titleStartsWith, startYear, issueNumber, diamondCode, digitalId, upc, isbn, ean, issn, hasDigitalIssue, modifiedSince, creators, characters, series, events, sharedAppearances, collaborators, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of comics filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="format">Filter by the issue format (e.g. comic, digital comic, hardcover).</param>
        /// <param name="formatType">Filter by the issue format type (comic or collection).</param>
        /// <param name="noVariants">Exclude variant comics from the result set.</param>
        /// <param name="dateDescriptor">Return comics within a predefined date range.</param>
        /// <param name="dateRange">Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.</param>
        /// <param name="title">Return only issues in series whose title matches the input.</param>
        /// <param name="titleStartsWith">Return only issues in series whose title starts with the input.</param>
        /// <param name="startYear">Return only issues in series whose start year matches the input.</param>
        /// <param name="issueNumber">Return only issues in series whose issue number matches the input.</param>
        /// <param name="diamondCode">Filter by diamond code.</param>
        /// <param name="digitalId">Filter by digital comic id.</param>
        /// <param name="upc">Filter by UPC.</param>
        /// <param name="isbn">Filter by ISBN.</param>
        /// <param name="ean">Filter by EAN.</param>
        /// <param name="issn">Filter by ISSN.</param>
        /// <param name="hasDigitalIssue">Include only results which are available digitally.</param>
        /// <param name="modifiedSince">Return only comics which have been modified since the specified date.</param>
        /// <param name="creators">Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only comics which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only comics which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only comics which take place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="sharedAppearances">Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).</param>
        /// <param name="collaborators">Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ComicDataWrapper> ComicsAsync(int storyId, string format, string formatType, System.Collections.Generic.IEnumerable<bool> noVariants, System.Collections.Generic.IEnumerable<string> dateDescriptor, System.Collections.Generic.IEnumerable<int> dateRange, string title, string titleStartsWith, int? startYear, int? issueNumber, string diamondCode, int? digitalId, string upc, string isbn, string ean, string issn, System.Collections.Generic.IEnumerable<bool> hasDigitalIssue, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<int> sharedAppearances, System.Collections.Generic.IEnumerable<int> collaborators, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (storyId == null)
                throw new System.ArgumentNullException("storyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/stories/{storyId}/comics?");
            urlBuilder_.Replace("{storyId}", System.Uri.EscapeDataString(ConvertToString(storyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (formatType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("formatType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(formatType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (noVariants != null)
            {
                foreach (var item_ in noVariants) { urlBuilder_.Append(System.Uri.EscapeDataString("noVariants") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dateDescriptor != null)
            {
                foreach (var item_ in dateDescriptor) { urlBuilder_.Append(System.Uri.EscapeDataString("dateDescriptor") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dateRange != null)
            {
                foreach (var item_ in dateRange) { urlBuilder_.Append(System.Uri.EscapeDataString("dateRange") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (titleStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("titleStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(titleStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startYear != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (issueNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("issueNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(issueNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (diamondCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("diamondCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(diamondCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (digitalId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("digitalId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(digitalId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (upc != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("upc") + "=").Append(System.Uri.EscapeDataString(ConvertToString(upc, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isbn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isbn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isbn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ean != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ean") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ean, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (issn != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("issn") + "=").Append(System.Uri.EscapeDataString(ConvertToString(issn, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (hasDigitalIssue != null)
            {
                foreach (var item_ in hasDigitalIssue) { urlBuilder_.Append(System.Uri.EscapeDataString("hasDigitalIssue") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sharedAppearances != null)
            {
                foreach (var item_ in sharedAppearances) { urlBuilder_.Append(System.Uri.EscapeDataString("sharedAppearances") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (collaborators != null)
            {
                foreach (var item_ in collaborators) { urlBuilder_.Append(System.Uri.EscapeDataString("collaborators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComicDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of creators filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="firstName">Filter by creator first name (e.g. brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsAsync(int storyId, string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return CreatorsAsync(storyId, firstName, middleName, lastName, suffix, nameStartsWith, firstNameStartsWith, middleNameStartsWith, lastNameStartsWith, modifiedSince, comics, series, events, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of creators filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="firstName">Filter by creator first name (e.g. brian).</param>
        /// <param name="middleName">Filter by creator middle name (e.g. Michael).</param>
        /// <param name="lastName">Filter by creator last name (e.g. Bendis).</param>
        /// <param name="suffix">Filter by suffix or honorific (e.g. Jr., Sr.).</param>
        /// <param name="nameStartsWith">Filter by creator names that match critera (e.g. B, St L).</param>
        /// <param name="firstNameStartsWith">Filter by creator first names that match critera (e.g. B, St L).</param>
        /// <param name="middleNameStartsWith">Filter by creator middle names that match critera (e.g. Mi).</param>
        /// <param name="lastNameStartsWith">Filter by creator last names that match critera (e.g. Ben).</param>
        /// <param name="modifiedSince">Return only creators which have been modified since the specified date.</param>
        /// <param name="comics">Return only creators who worked on in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only creators who worked on the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="events">Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreatorDataWrapper> CreatorsAsync(int storyId, string firstName, string middleName, string lastName, string suffix, string nameStartsWith, string firstNameStartsWith, string middleNameStartsWith, string lastNameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> events, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (storyId == null)
                throw new System.ArgumentNullException("storyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/stories/{storyId}/creators?");
            urlBuilder_.Replace("{storyId}", System.Uri.EscapeDataString(ConvertToString(storyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (firstName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("firstName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(firstName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (middleName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("middleName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(middleName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (suffix != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("suffix") + "=").Append(System.Uri.EscapeDataString(ConvertToString(suffix, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (firstNameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("firstNameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(firstNameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (middleNameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("middleNameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(middleNameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lastNameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("lastNameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lastNameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreatorDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of events filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int storyId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return EventsAsync(storyId, name, nameStartsWith, modifiedSince, creators, characters, series, comics, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of events filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="name">Filter the event list by name.</param>
        /// <param name="nameStartsWith">Return events with names that begin with the specified string (e.g. Sp).</param>
        /// <param name="modifiedSince">Return only events which have been modified since the specified date.</param>
        /// <param name="creators">Return only events which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only events which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="series">Return only events which are part of the specified series (accepts a comma-separated list of ids).</param>
        /// <param name="comics">Return only events which take place in the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<EventDataWrapper> EventsAsync(int storyId, string name, string nameStartsWith, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, System.Collections.Generic.IEnumerable<int> series, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (storyId == null)
                throw new System.ArgumentNullException("storyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/stories/{storyId}/events?");
            urlBuilder_.Replace("{storyId}", System.Uri.EscapeDataString(ConvertToString(storyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (nameStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("nameStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (series != null)
            {
                foreach (var item_ in series) { urlBuilder_.Append(System.Uri.EscapeDataString("series") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EventDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>Fetches lists of series filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="events">Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="title">Filter by series title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only series which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SeriesDataWrapper> SeriesAsync(int storyId, System.Collections.Generic.IEnumerable<int> events, string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset)
        {
            return SeriesAsync(storyId, events, title, titleStartsWith, startYear, modifiedSince, comics, creators, characters, seriesType, contains, orderBy, limit, offset, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Fetches lists of series filtered by a story id.</summary>
        /// <param name="storyId">The story ID.</param>
        /// <param name="events">Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).</param>
        /// <param name="title">Filter by series title.</param>
        /// <param name="titleStartsWith">Return series with titles that begin with the specified string (e.g. Sp).</param>
        /// <param name="startYear">Return only series matching the specified start year.</param>
        /// <param name="modifiedSince">Return only series which have been modified since the specified date.</param>
        /// <param name="comics">Return only series which contain the specified comics (accepts a comma-separated list of ids).</param>
        /// <param name="creators">Return only series which feature work by the specified creators (accepts a comma-separated list of ids).</param>
        /// <param name="characters">Return only series which feature the specified characters (accepts a comma-separated list of ids).</param>
        /// <param name="seriesType">Filter the series by publication frequency type.</param>
        /// <param name="contains">Return only series containing one or more comics with the specified format.</param>
        /// <param name="orderBy">Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed.</param>
        /// <param name="limit">Limit the result set to the specified number of resources.</param>
        /// <param name="offset">Skip the specified number of resources in the result set.</param>
        /// <returns>No response was specified</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SeriesDataWrapper> SeriesAsync(int storyId, System.Collections.Generic.IEnumerable<int> events, string title, string titleStartsWith, int? startYear, System.DateTimeOffset? modifiedSince, System.Collections.Generic.IEnumerable<int> comics, System.Collections.Generic.IEnumerable<int> creators, System.Collections.Generic.IEnumerable<int> characters, string seriesType, System.Collections.Generic.IEnumerable<string> contains, System.Collections.Generic.IEnumerable<string> orderBy, int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            if (storyId == null)
                throw new System.ArgumentNullException("storyId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/public/stories/{storyId}/series?");
            urlBuilder_.Replace("{storyId}", System.Uri.EscapeDataString(ConvertToString(storyId, System.Globalization.CultureInfo.InvariantCulture)));
            if (events != null)
            {
                foreach (var item_ in events) { urlBuilder_.Append(System.Uri.EscapeDataString("events") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (titleStartsWith != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("titleStartsWith") + "=").Append(System.Uri.EscapeDataString(ConvertToString(titleStartsWith, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startYear != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("startYear") + "=").Append(System.Uri.EscapeDataString(ConvertToString(startYear, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedSince != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("modifiedSince") + "=").Append(System.Uri.EscapeDataString(modifiedSince.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (comics != null)
            {
                foreach (var item_ in comics) { urlBuilder_.Append(System.Uri.EscapeDataString("comics") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (creators != null)
            {
                foreach (var item_ in creators) { urlBuilder_.Append(System.Uri.EscapeDataString("creators") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (characters != null)
            {
                foreach (var item_ in characters) { urlBuilder_.Append(System.Uri.EscapeDataString("characters") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (seriesType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("seriesType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(seriesType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (contains != null)
            {
                foreach (var item_ in contains) { urlBuilder_.Append(System.Uri.EscapeDataString("contains") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (orderBy != null)
            {
                foreach (var item_ in orderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("orderBy") + "=").Append((item_ == null) ? "" : System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (limit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("limit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (offset != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("offset") + "=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SeriesDataWrapper>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return null;
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return (result is null) ? string.Empty : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ComicList
    {
        /// <summary>The number of total available issues in this list. Will always be greater than or equal to the "returned" value.</summary>
        [Newtonsoft.Json.JsonProperty("available", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Available { get; set; }

        /// <summary>The number of issues returned in this collection (up to 20).</summary>
        [Newtonsoft.Json.JsonProperty("returned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Returned { get; set; }

        /// <summary>The path to the full list of issues in this collection.</summary>
        [Newtonsoft.Json.JsonProperty("collectionURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionURI { get; set; }

        /// <summary>The list of returned issues in this collection.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ComicSummary> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EventList
    {
        /// <summary>The number of total available events in this list. Will always be greater than or equal to the "returned" value.</summary>
        [Newtonsoft.Json.JsonProperty("available", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Available { get; set; }

        /// <summary>The number of events returned in this collection (up to 20).</summary>
        [Newtonsoft.Json.JsonProperty("returned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Returned { get; set; }

        /// <summary>The path to the full list of events in this collection.</summary>
        [Newtonsoft.Json.JsonProperty("collectionURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionURI { get; set; }

        /// <summary>The list of returned events in this collection.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EventSummary> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreatorList
    {
        /// <summary>The number of total available creators in this list. Will always be greater than or equal to the "returned" value.</summary>
        [Newtonsoft.Json.JsonProperty("available", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Available { get; set; }

        /// <summary>The number of creators returned in this collection (up to 20).</summary>
        [Newtonsoft.Json.JsonProperty("returned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Returned { get; set; }

        /// <summary>The path to the full list of creators in this collection.</summary>
        [Newtonsoft.Json.JsonProperty("collectionURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionURI { get; set; }

        /// <summary>The list of returned creators in this collection.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreatorSummary> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CharacterList
    {
        /// <summary>The number of total available characters in this list. Will always be greater than or equal to the "returned" value.</summary>
        [Newtonsoft.Json.JsonProperty("available", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Available { get; set; }

        /// <summary>The number of characters returned in this collection (up to 20).</summary>
        [Newtonsoft.Json.JsonProperty("returned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Returned { get; set; }

        /// <summary>The path to the full list of characters in this collection.</summary>
        [Newtonsoft.Json.JsonProperty("collectionURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionURI { get; set; }

        /// <summary>The list of returned characters in this collection.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CharacterSummary> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SeriesList
    {
        /// <summary>The number of total available series in this list. Will always be greater than or equal to the "returned" value.</summary>
        [Newtonsoft.Json.JsonProperty("available", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Available { get; set; }

        /// <summary>The number of series returned in this collection (up to 20).</summary>
        [Newtonsoft.Json.JsonProperty("returned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Returned { get; set; }

        /// <summary>The path to the full list of series in this collection.</summary>
        [Newtonsoft.Json.JsonProperty("collectionURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionURI { get; set; }

        /// <summary>The list of returned series in this collection.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SeriesSummary> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StoryList
    {
        /// <summary>The number of total available stories in this list. Will always be greater than or equal to the "returned" value.</summary>
        [Newtonsoft.Json.JsonProperty("available", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Available { get; set; }

        /// <summary>The number of stories returned in this collection (up to 20).</summary>
        [Newtonsoft.Json.JsonProperty("returned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Returned { get; set; }

        /// <summary>The path to the full list of stories in this collection.</summary>
        [Newtonsoft.Json.JsonProperty("collectionURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionURI { get; set; }

        /// <summary>The list of returned stories in this collection.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StorySummary> Items { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CharacterSummary
    {
        /// <summary>The path to the individual character resource.</summary>
        [Newtonsoft.Json.JsonProperty("resourceURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceURI { get; set; }

        /// <summary>The full name of the character.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>The role of the creator in the parent entity.</summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EventSummary
    {
        /// <summary>The path to the individual event resource.</summary>
        [Newtonsoft.Json.JsonProperty("resourceURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceURI { get; set; }

        /// <summary>The name of the event.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SeriesSummary
    {
        /// <summary>The path to the individual series resource.</summary>
        [Newtonsoft.Json.JsonProperty("resourceURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceURI { get; set; }

        /// <summary>The canonical name of the series.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ComicSummary
    {
        /// <summary>The path to the individual comic resource.</summary>
        [Newtonsoft.Json.JsonProperty("resourceURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceURI { get; set; }

        /// <summary>The canonical name of the comic.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Url
    {
        /// <summary>A text identifier for the URL.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>A full URL (including scheme, domain, and path).</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url1 { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreatorSummary
    {
        /// <summary>The path to the individual creator resource.</summary>
        [Newtonsoft.Json.JsonProperty("resourceURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceURI { get; set; }

        /// <summary>The full name of the creator.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>The role of the creator in the parent entity.</summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StorySummary
    {
        /// <summary>The path to the individual story resource.</summary>
        [Newtonsoft.Json.JsonProperty("resourceURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceURI { get; set; }

        /// <summary>The canonical name of the story.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>The type of the story (interior or cover).</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Image
    {
        /// <summary>The directory path of to the image.</summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>The file extension for the image.</summary>
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ComicDate
    {
        /// <summary>A description of the date (e.g. onsale date, FOC date).</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>The date.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CharacterDataContainer
    {
        /// <summary>The requested offset (number of skipped results) of the call.</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Offset { get; set; }

        /// <summary>The requested result limit.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit { get; set; }

        /// <summary>The total number of resources available given the current filter set.</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total { get; set; }

        /// <summary>The total number of results returned by this call.</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>The list of characters returned by the call.</summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Character> Results { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EventDataContainer
    {
        /// <summary>The requested offset (number of skipped results) of the call.</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Offset { get; set; }

        /// <summary>The requested result limit.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit { get; set; }

        /// <summary>The total number of resources available given the current filter set.</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total { get; set; }

        /// <summary>The total number of results returned by this call.</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>The list of events returned by the call</summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Event> Results { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ComicPrice
    {
        /// <summary>A description of the price (e.g. print price, digital price).</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>The price (all prices in USD).</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? Price { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EventDataWrapper
    {
        /// <summary>The HTTP status code of the returned result.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        /// <summary>A string description of the call status.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>The copyright notice for the returned result.</summary>
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Copyright { get; set; }

        /// <summary>The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API.</summary>
        [Newtonsoft.Json.JsonProperty("attributionText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributionText { get; set; }

        /// <summary>An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API.</summary>
        [Newtonsoft.Json.JsonProperty("attributionHTML", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributionHTML { get; set; }

        /// <summary>The results returned by the call.</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EventDataContainer Data { get; set; }

        /// <summary>A digest value of the content returned by the call.</summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Creator
    {
        /// <summary>The unique ID of the creator resource.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>The first name of the creator.</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>The middle name of the creator.</summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MiddleName { get; set; }

        /// <summary>The last name of the creator.</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>The suffix or honorific for the creator.</summary>
        [Newtonsoft.Json.JsonProperty("suffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Suffix { get; set; }

        /// <summary>The full name of the creator (a space-separated concatenation of the above four fields).</summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }

        /// <summary>The date the resource was most recently modified.</summary>
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Modified { get; set; }

        /// <summary>The canonical URL identifier for this resource.</summary>
        [Newtonsoft.Json.JsonProperty("resourceURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceURI { get; set; }

        /// <summary>A set of public web site URLs for the resource.</summary>
        [Newtonsoft.Json.JsonProperty("urls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Url> Urls { get; set; }

        /// <summary>The representative image for this creator.</summary>
        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Image Thumbnail { get; set; }

        /// <summary>A resource list containing the series which feature work by this creator.</summary>
        [Newtonsoft.Json.JsonProperty("series", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SeriesList Series { get; set; }

        /// <summary>A resource list containing the stories which feature work by this creator.</summary>
        [Newtonsoft.Json.JsonProperty("stories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StoryList Stories { get; set; }

        /// <summary>A resource list containing the comics which feature work by this creator.</summary>
        [Newtonsoft.Json.JsonProperty("comics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComicList Comics { get; set; }

        /// <summary>A resource list containing the events which feature work by this creator.</summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EventList Events { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Event
    {
        /// <summary>The unique ID of the event resource.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>The title of the event.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>A description of the event.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The canonical URL identifier for this resource.</summary>
        [Newtonsoft.Json.JsonProperty("resourceURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceURI { get; set; }

        /// <summary>A set of public web site URLs for the event.</summary>
        [Newtonsoft.Json.JsonProperty("urls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Url> Urls { get; set; }

        /// <summary>The date the resource was most recently modified.</summary>
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Modified { get; set; }

        /// <summary>The date of publication of the first issue in this event.</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Start { get; set; }

        /// <summary>The date of publication of the last issue in this event.</summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? End { get; set; }

        /// <summary>The representative image for this event.</summary>
        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Image Thumbnail { get; set; }

        /// <summary>A resource list containing the comics in this event.</summary>
        [Newtonsoft.Json.JsonProperty("comics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComicList Comics { get; set; }

        /// <summary>A resource list containing the stories in this event.</summary>
        [Newtonsoft.Json.JsonProperty("stories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StoryList Stories { get; set; }

        /// <summary>A resource list containing the series in this event.</summary>
        [Newtonsoft.Json.JsonProperty("series", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SeriesList Series { get; set; }

        /// <summary>A resource list containing the characters which appear in this event.</summary>
        [Newtonsoft.Json.JsonProperty("characters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterList Characters { get; set; }

        /// <summary>A resource list containing creators whose work appears in this event.</summary>
        [Newtonsoft.Json.JsonProperty("creators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreatorList Creators { get; set; }

        /// <summary>A summary representation of the event which follows this event.</summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EventSummary Next { get; set; }

        /// <summary>A summary representation of the event which preceded this event.</summary>
        [Newtonsoft.Json.JsonProperty("previous", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EventSummary Previous { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ComicDataContainer
    {
        /// <summary>The requested offset (number of skipped results) of the call.</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Offset { get; set; }

        /// <summary>The requested result limit.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit { get; set; }

        /// <summary>The total number of resources available given the current filter set.</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total { get; set; }

        /// <summary>The total number of results returned by this call.</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>The list of comics returned by the call</summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Comic> Results { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TextObject
    {
        /// <summary>The canonical type of the text object (e.g. solicit text, preview text, etc.).</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>The IETF language tag denoting the language the text object is written in.</summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }

        /// <summary>The text.</summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreatorDataWrapper
    {
        /// <summary>The HTTP status code of the returned result.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        /// <summary>A string description of the call status.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>The copyright notice for the returned result.</summary>
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Copyright { get; set; }

        /// <summary>The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API.</summary>
        [Newtonsoft.Json.JsonProperty("attributionText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributionText { get; set; }

        /// <summary>An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API.</summary>
        [Newtonsoft.Json.JsonProperty("attributionHTML", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributionHTML { get; set; }

        /// <summary>The results returned by the call.</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreatorDataContainer Data { get; set; }

        /// <summary>A digest value of the content returned by the call.</summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StoryDataWrapper
    {
        /// <summary>The HTTP status code of the returned result.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        /// <summary>A string description of the call status.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>The copyright notice for the returned result.</summary>
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Copyright { get; set; }

        /// <summary>The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API.</summary>
        [Newtonsoft.Json.JsonProperty("attributionText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributionText { get; set; }

        /// <summary>An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API.</summary>
        [Newtonsoft.Json.JsonProperty("attributionHTML", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributionHTML { get; set; }

        /// <summary>The results returned by the call.</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StoryDataContainer Data { get; set; }

        /// <summary>A digest value of the content returned by the call.</summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Character
    {
        /// <summary>The unique ID of the character resource.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>The name of the character.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>A short bio or description of the character.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The date the resource was most recently modified.</summary>
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Modified { get; set; }

        /// <summary>The canonical URL identifier for this resource.</summary>
        [Newtonsoft.Json.JsonProperty("resourceURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceURI { get; set; }

        /// <summary>A set of public web site URLs for the resource.</summary>
        [Newtonsoft.Json.JsonProperty("urls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Url> Urls { get; set; }

        /// <summary>The representative image for this character.</summary>
        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Image Thumbnail { get; set; }

        /// <summary>A resource list containing comics which feature this character.</summary>
        [Newtonsoft.Json.JsonProperty("comics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComicList Comics { get; set; }

        /// <summary>A resource list of stories in which this character appears.</summary>
        [Newtonsoft.Json.JsonProperty("stories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StoryList Stories { get; set; }

        /// <summary>A resource list of events in which this character appears.</summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EventList Events { get; set; }

        /// <summary>A resource list of series in which this character appears.</summary>
        [Newtonsoft.Json.JsonProperty("series", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SeriesList Series { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CharacterDataWrapper
    {
        /// <summary>The HTTP status code of the returned result.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        /// <summary>A string description of the call status.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>The copyright notice for the returned result.</summary>
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Copyright { get; set; }

        /// <summary>The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API.</summary>
        [Newtonsoft.Json.JsonProperty("attributionText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributionText { get; set; }

        /// <summary>An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API.</summary>
        [Newtonsoft.Json.JsonProperty("attributionHTML", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributionHTML { get; set; }

        /// <summary>The results returned by the call.</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterDataContainer Data { get; set; }

        /// <summary>A digest value of the content returned by the call.</summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ComicDataWrapper
    {
        /// <summary>The HTTP status code of the returned result.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        /// <summary>A string description of the call status.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>The copyright notice for the returned result.</summary>
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Copyright { get; set; }

        /// <summary>The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API.</summary>
        [Newtonsoft.Json.JsonProperty("attributionText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributionText { get; set; }

        /// <summary>An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API.</summary>
        [Newtonsoft.Json.JsonProperty("attributionHTML", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributionHTML { get; set; }

        /// <summary>The results returned by the call.</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComicDataContainer Data { get; set; }

        /// <summary>A digest value of the content returned by the call.</summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Series
    {
        /// <summary>The unique ID of the series resource.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>The canonical title of the series.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>A description of the series.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The canonical URL identifier for this resource.</summary>
        [Newtonsoft.Json.JsonProperty("resourceURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceURI { get; set; }

        /// <summary>A set of public web site URLs for the resource.</summary>
        [Newtonsoft.Json.JsonProperty("urls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Url> Urls { get; set; }

        /// <summary>The first year of publication for the series.</summary>
        [Newtonsoft.Json.JsonProperty("startYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StartYear { get; set; }

        /// <summary>The last year of publication for the series (conventionally, 2099 for ongoing series) .</summary>
        [Newtonsoft.Json.JsonProperty("endYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EndYear { get; set; }

        /// <summary>The age-appropriateness rating for the series.</summary>
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rating { get; set; }

        /// <summary>The date the resource was most recently modified.</summary>
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Modified { get; set; }

        /// <summary>The representative image for this series.</summary>
        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Image Thumbnail { get; set; }

        /// <summary>A resource list containing comics in this series.</summary>
        [Newtonsoft.Json.JsonProperty("comics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComicList Comics { get; set; }

        /// <summary>A resource list containing stories which occur in comics in this series.</summary>
        [Newtonsoft.Json.JsonProperty("stories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StoryList Stories { get; set; }

        /// <summary>A resource list containing events which take place in comics in this series.</summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EventList Events { get; set; }

        /// <summary>A resource list containing characters which appear in comics in this series.</summary>
        [Newtonsoft.Json.JsonProperty("characters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterList Characters { get; set; }

        /// <summary>A resource list of creators whose work appears in comics in this series.</summary>
        [Newtonsoft.Json.JsonProperty("creators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreatorList Creators { get; set; }

        /// <summary>A summary representation of the series which follows this series.</summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SeriesSummary Next { get; set; }

        /// <summary>A summary representation of the series which preceded this series.</summary>
        [Newtonsoft.Json.JsonProperty("previous", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SeriesSummary Previous { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SeriesDataWrapper
    {
        /// <summary>The HTTP status code of the returned result.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        /// <summary>A string description of the call status.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>The copyright notice for the returned result.</summary>
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Copyright { get; set; }

        /// <summary>The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API.</summary>
        [Newtonsoft.Json.JsonProperty("attributionText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributionText { get; set; }

        /// <summary>An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API.</summary>
        [Newtonsoft.Json.JsonProperty("attributionHTML", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AttributionHTML { get; set; }

        /// <summary>The results returned by the call.</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SeriesDataContainer Data { get; set; }

        /// <summary>A digest value of the content returned by the call.</summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SeriesDataContainer
    {
        /// <summary>The requested offset (number of skipped results) of the call.</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Offset { get; set; }

        /// <summary>The requested result limit.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit { get; set; }

        /// <summary>The total number of resources available given the current filter set.</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total { get; set; }

        /// <summary>The total number of results returned by this call.</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>The list of series returned by the call</summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Series> Results { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StoryDataContainer
    {
        /// <summary>The requested offset (number of skipped results) of the call.</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Offset { get; set; }

        /// <summary>The requested result limit.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit { get; set; }

        /// <summary>The total number of resources available given the current filter set.</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total { get; set; }

        /// <summary>The total number of results returned by this call.</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>The list of stories returned by the call</summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Story> Results { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Comic
    {
        /// <summary>The unique ID of the comic resource.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>The ID of the digital comic representation of this comic. Will be 0 if the comic is not available digitally.</summary>
        [Newtonsoft.Json.JsonProperty("digitalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DigitalId { get; set; }

        /// <summary>The canonical title of the comic.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>The number of the issue in the series (will generally be 0 for collection formats).</summary>
        [Newtonsoft.Json.JsonProperty("issueNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? IssueNumber { get; set; }

        /// <summary>If the issue is a variant (e.g. an alternate cover, second printing, or director’s cut), a text description of the variant.</summary>
        [Newtonsoft.Json.JsonProperty("variantDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VariantDescription { get; set; }

        /// <summary>The preferred description of the comic.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The date the resource was most recently modified.</summary>
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Modified { get; set; }

        /// <summary>The ISBN for the comic (generally only populated for collection formats).</summary>
        [Newtonsoft.Json.JsonProperty("isbn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Isbn { get; set; }

        /// <summary>The UPC barcode number for the comic (generally only populated for periodical formats).</summary>
        [Newtonsoft.Json.JsonProperty("upc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Upc { get; set; }

        /// <summary>The Diamond code for the comic.</summary>
        [Newtonsoft.Json.JsonProperty("diamondCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiamondCode { get; set; }

        /// <summary>The EAN barcode for the comic.</summary>
        [Newtonsoft.Json.JsonProperty("ean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ean { get; set; }

        /// <summary>The ISSN barcode for the comic.</summary>
        [Newtonsoft.Json.JsonProperty("issn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issn { get; set; }

        /// <summary>The publication format of the comic e.g. comic, hardcover, trade paperback.</summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        /// <summary>The number of story pages in the comic.</summary>
        [Newtonsoft.Json.JsonProperty("pageCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageCount { get; set; }

        /// <summary>A set of descriptive text blurbs for the comic.</summary>
        [Newtonsoft.Json.JsonProperty("textObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TextObject> TextObjects { get; set; }

        /// <summary>The canonical URL identifier for this resource.</summary>
        [Newtonsoft.Json.JsonProperty("resourceURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceURI { get; set; }

        /// <summary>A set of public web site URLs for the resource.</summary>
        [Newtonsoft.Json.JsonProperty("urls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Url> Urls { get; set; }

        /// <summary>A summary representation of the series to which this comic belongs.</summary>
        [Newtonsoft.Json.JsonProperty("series", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SeriesSummary Series { get; set; }

        /// <summary>A list of variant issues for this comic (includes the "original" issue if the current issue is a variant).</summary>
        [Newtonsoft.Json.JsonProperty("variants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ComicSummary> Variants { get; set; }

        /// <summary>A list of collections which include this comic (will generally be empty if the comic's format is a collection).</summary>
        [Newtonsoft.Json.JsonProperty("collections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ComicSummary> Collections { get; set; }

        /// <summary>A list of issues collected in this comic (will generally be empty for periodical formats such as "comic" or "magazine").</summary>
        [Newtonsoft.Json.JsonProperty("collectedIssues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ComicSummary> CollectedIssues { get; set; }

        /// <summary>A list of key dates for this comic.</summary>
        [Newtonsoft.Json.JsonProperty("dates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ComicDate> Dates { get; set; }

        /// <summary>A list of prices for this comic.</summary>
        [Newtonsoft.Json.JsonProperty("prices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ComicPrice> Prices { get; set; }

        /// <summary>The representative image for this comic.</summary>
        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Image Thumbnail { get; set; }

        /// <summary>A list of promotional images associated with this comic.</summary>
        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Image> Images { get; set; }

        /// <summary>A resource list containing the creators associated with this comic.</summary>
        [Newtonsoft.Json.JsonProperty("creators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreatorList Creators { get; set; }

        /// <summary>A resource list containing the characters which appear in this comic.</summary>
        [Newtonsoft.Json.JsonProperty("characters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterList Characters { get; set; }

        /// <summary>A resource list containing the stories which appear in this comic.</summary>
        [Newtonsoft.Json.JsonProperty("stories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StoryList Stories { get; set; }

        /// <summary>A resource list containing the events in which this comic appears.</summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EventList Events { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreatorDataContainer
    {
        /// <summary>The requested offset (number of skipped results) of the call.</summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Offset { get; set; }

        /// <summary>The requested result limit.</summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit { get; set; }

        /// <summary>The total number of resources available given the current filter set.</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total { get; set; }

        /// <summary>The total number of results returned by this call.</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; set; }

        /// <summary>The list of creators returned by the call.</summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Creator> Results { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Story
    {
        /// <summary>The unique ID of the story resource.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>The story title.</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>A short description of the story.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>The canonical URL identifier for this resource. </summary>
        [Newtonsoft.Json.JsonProperty("resourceURI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceURI { get; set; }

        /// <summary>The story type e.g. interior story, cover, text story.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>The date the resource was most recently modified.</summary>
        [Newtonsoft.Json.JsonProperty("modified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Modified { get; set; }

        /// <summary>The representative image for this story.</summary>
        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Image Thumbnail { get; set; }

        /// <summary>A resource list containing comics in which this story takes place.</summary>
        [Newtonsoft.Json.JsonProperty("comics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComicList Comics { get; set; }

        /// <summary>A resource list containing series in which this story appears.</summary>
        [Newtonsoft.Json.JsonProperty("series", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SeriesList Series { get; set; }

        /// <summary>A resource list of the events in which this story appears.</summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EventList Events { get; set; }

        /// <summary>A resource list of characters which appear in this story.</summary>
        [Newtonsoft.Json.JsonProperty("characters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CharacterList Characters { get; set; }

        /// <summary>A resource list of creators who worked on this story.</summary>
        [Newtonsoft.Json.JsonProperty("creators", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreatorList Creators { get; set; }

        /// <summary>A summary representation of the issue in which this story was originally published.</summary>
        [Newtonsoft.Json.JsonProperty("originalissue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComicSummary Originalissue { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v11.0.0.0)")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108